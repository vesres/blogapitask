WHAT MORE CAN BE DONE
---------------------
-- More Java8 e.g. Optional etc.
-- Uploaded files should be stored in dedicated place in server.
   For simplicity, it was placed for the task in the resources folder.
-- Utility class for e.g. deletePost.
-- User username should be unique.
-- More methods for rest service, findPostById etc.
-- Production level authentication, db or OAuth, OAuth2 etc.
   All versions must be protected through SSL/TLS. JWT (Json Web Tokens) is also a solution.

-- If delete post fails, do not delete image in filesystem. Specific exception for db delete and other for file delete.
-- Exception handling of rest controller using @ExceptionHandler and specific exceptions for other cases e.g.
   trying to create a user with no data.
-- Filename property of post entity can be validated the same way as username of user entity.
-- Pagination and filtering in Rest API. e.g /comments?offset=30&limit10
-- HATEOAS
-- Send error message in JSON format.
-- Caching
   Caching the REST API
   --------------------
   Use reverse proxy for safe methods(GET).When an API receives a call with an unsafe resource, it should fire
   a PURGE request on that resource so that the cached resource is expired.Of course the reverse proxy should be
   configured to still remove a resource when it receives a PURGE. So for unsafe methods e.g. a PUT is send to the
   API but then the API sends a PURGE to the cache.

   Caching with Hibernate
   ----------------------------
   EHCache, Memcached etc.

-- Testing
   JPA - Hibernate
   ------------
   Integration Testing.

    REST Unit testing
    ------------------
    Spring's MockMvc for testing or Rest Assured since
    we have authentication.

-- More detailed Javadoc

NON-PRODUCTION DECISIONS
------------------------
- I tried to keep the task as simple as possible and I
did many of my choices based on that e.g. basic auth.
- spring.jpa.generate-ddl
- basic auth
- db password on properties file
- I assumed 1-1 user to blog relationship.


